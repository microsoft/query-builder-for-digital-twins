on:
  workflow_call:
    secrets:
      client_id:
        required: true
      az_creds:
        required: true
      az_sub:
        required: true
      storage_name:
        required: true
      container_name:
        required: true
      vault_name:
        required: true
      aad_cert:
        required: true
      sign_cert:
        required: true
      signing_cert_fingerprint:
        required: true

jobs:
  Sign:
    runs-on: windows-latest
    steps:
    - name: Download Unsigned Packages
      uses: actions/download-artifact@v2
      with:
        name: unsigned
        path: unsigned

    - name: Create Signed Directory
      run: |
        mkdir signed
    - name: Create Auth File
      env:
        CLIENT_ID: ${{ secrets.client_id }}
      run: |
        $authJson = @'
        {
          "Version": "1.0.0",
          "AuthenticationType": "AAD_CERT",
          "TenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
          "ClientId": "${{env.CLIENT_ID}}",
          "AuthCert": {
            "SubjectName": "CN=${{env.CLIENT_ID}}.microsoft.com",
            "StoreLocation": "LocalMachine",
            "StoreName": "My",
            "SendX5c": "true"
          },
          "RequestSigningCert": {
            "SubjectName": "CN=${{env.CLIENT_ID}}",
            "StoreLocation": "LocalMachine",
            "StoreName": "My"
          }
        }
        '@
        Out-File -FilePath .\auth.json -InputObject $authJson
    - name: Create Stable Input File
      run: |
        $fileName = (Get-ChildItem -Recurse -Filter *.nupkg | Select -Property Name).Name
        $stableInputJsonTemplate = @'
        {
          "Version": "1.0.0",
          "SignBatches": [
            {
              "SourceLocationType": "UNC",
              "SourceRootDirectory": "@@workspace@@\\unsigned",
              "DestinationLocationType": "UNC",
              "DestinationRootDirectory": "@@workspace@@\\signed",
              "SignRequestFiles": [
                {
                  "SourceLocation": "${{fileName}}",
                  "DestinationLocation": "${{fileName}}"
                }
              ],
              "SigningInfo": {
                "Operations": [
                  {
                    "KeyCode": "CP-401405",
                    "OperationCode": "NuGetSign",
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                  "KeyCode": "CP-401405",
                    "OperationCode": "NuGetVerify",
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
              }
            }
          ]
        }
        '@
        $workspace = [regex]::escape("${{github.workspace}}")
        $stableInputJson = $stableInputJsonTemplate -replace '@@workspace@@', $workspace
        Out-File -FilePath .\stableInput.json -InputObject $stableInputJson
    - name: Azure Login
      uses: azure/login@v1
      with:
          creds: ${{ secrets.az_creds }}

    - name: Install ESRP Client
      run: |
        az storage blob download --auth-mode login --subscription  ${{ secrets.az_sub }} --account-name ${{ secrets.storage_name }} -c ${{ secrets.container_name }} -n microsoft.esrpclient.1.2.76.zip -f esrp.zip
        unzip -d ./esrp esrp.zip
    - name: Install Certificates
      run: |
        az keyvault secret download --subscription "${{ secrets.az_sub }}" --vault-name "${{ secrets.vault_name }}" --name "${{ secrets.aad_cert }}" -f cert.pfx
        certutil -silent -f -importpfx cert.pfx
        rm cert.pfx
        az keyvault secret download --subscription "${{ secrets.az_sub }}" --vault-name "${{ secrets.vault_name }}" --name "${{ secrets.sign_cert }}" -f cert.pfx
        certutil -silent -f -importpfx cert.pfx
        rm cert.pfx
    - name: Azure logout
      run: az logout
      if: always()

    - name: Run ESRP Client
      run: |
        ./esrp/tools/EsrpClient.exe sign -a ./auth.json -p ./esrp/tools/Policy.json -c ./esrp/tools/Config.json -i ./stableInput.json -o ./Output.json -l Verbose -f STDOUT
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Verify Signature
      run: |
        $fileName = (Get-ChildItem -Recurse -Filter *.nupkg | Select -Property Name).Name
        nuget verify -Signatures signed/${{fileName}} -CertificateFingerprint ${{secrets.signing_cert_fingerprint}}
    - name: Upload Signed Packages
      uses: actions/upload-artifact@v2
      with:
        name: signed
        path: signed
