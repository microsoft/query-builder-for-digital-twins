name: Package publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
#     - name: Get branch names
#       id: branch-names
#       uses: tj-actions/branch-names@v5.1
      
#     - name: Current branch name
#       run: echo "${{ steps.branch-names.outputs.current_branch }}"
      
#     - name: Install git-conventional-commits
#       run: npm install --global git-conventional-commits
      
#     - name: Validate last commit message
#       run: |
#         git checkout ${{ steps.branch-names.outputs.current_branch }}
#         git rev-list --format=%B --max-count=1 HEAD | tail +2 > msg.txt
#         git-conventional-commits commit-msg-hook msg.txt

#     - name: Determine version
#       id: conventional-commits
#       run: echo "::set-output name=version::$(npx -q git-conventional-commits version)"
      
#     - name: examine version
#       run: echo "${{ steps.conventional-commits.outputs.version }}"

#     - name: Setup .NET
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: 6.0.x

#     - name: Test
#       run: dotnet test --verbosity normal   

#     - name: Install GitVersion
#       uses: gittools/actions/gitversion/setup@v0.9.7
#       with:
#         versionSpec: '5.x'
#     - name: Determine Version
#       id:   gitversion
#       uses: gittools/actions/gitversion/execute@v0.9.7
#       with:
#         useConfigFile: true

#     - name: Set version variables
#       run: |
#         echo "STABLE=${{steps.gitversion.outputs.majorMinorPatch}}" >> $GITHUB_ENV
#         echo "BETA=${{steps.gitversion.outputs.majorMinorPatch}}-beta.$(date +%s)" >> $GITHUB_ENV

#     - name: Pack
#       run: |
#         dotnet pack 'QueryBuilder/QueryBuilder.csproj' --configuration Release /p:Version="${{env.BETA}}" --output beta
#         dotnet pack 'QueryBuilder/QueryBuilder.csproj' --configuration Release /p:Version="${{env.STABLE}}" --output stable

#     - name: Publish Beta
#       uses: actions/upload-artifact@v2
#       with:
#         name: beta
#         path: 'beta/*.nupkg'

#     - name: Publish Stable
#       uses: actions/upload-artifact@v2
#       with:
#         name: stable
#         path: 'stable/*.nupkg'


  Sign:
    runs-on: ubuntu-latest
    environment: Sign
    needs: Build
    env:
      auth: |
        {
          "Version": "1.0.0",
          "AuthenticationType": "AAD_CERT",
          "TenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
          "ClientId": "${{ secrets.AAD_SIGNING_CLIENT_ID }}",
          "AuthCert": {
            "SubjectName": "CN=${{ secrets.AAD_SIGNING_CLIENT_ID }}.microsoft.com",
            "StoreLocation": "LocalMachine",
            "StoreName": "My",
            "SendX5c": "true"
          },
          "RequestSigningCert": {
            "SubjectName": "CN=${{ secrets.AAD_SIGNING_CLIENT_ID }}",
            "StoreLocation": "LocalMachine",
            "StoreName": "My"
          }
        }
    steps:
    - name: output auth
      run: echo $auth

    - uses: azure/login@v1
      name: Azure Login
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install ESRP Client
      run: |
        az storage blob download --auth-mode login --subscription  ${{ secrets.AZURE_SUBSCRIPTION }} --account-name wlpistorageaccount -c esrp-client -n microsoft.esrpclient.1.2.76.zip -f esrp.zip
        ls
        unzip -d ./esrp esrp.zip

    - name: Install Certificates
      shell: pwsh
      env:
        AZ_SUB: ${{ secrets.AZURE_SUBSCRIPTION }}
        AZ_VAULT: ${{ secrets.AZURE_VAULT }}
        AAD_CERT: ${{ secrets.AAD_AUTH_CERT }}
        ESRP_CERT: ${{ secrets.ESRP_SIGNING_CERT }}
      run: |
        az keyvault secret download --subscription "${{env.AZ_SUB}}" --vault-name "${{env.AZ_VAULT}}" --name "${{env.AAD_CERT}}" -f out.pfx
        certutil -f -importpfx out.pfx
        rm out.pfx
        az keyvault secret download --subscription "${{env.AZ_SUB}}" --vault-name "${{env.AZ_VAULT}}" --name "${{env.ESRP_CERT}}" -f out.pfx
        certutil -f -importpfx out.pfx
        rm out.pfx

    - name: Azure logout
      run: az logout
