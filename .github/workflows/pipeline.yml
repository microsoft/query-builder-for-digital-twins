name: Package publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      beta-version: ${{steps.version.outputs.beta-version}}
      stable-version: ${{steps.version.outputs.stable-version}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Get branch names
      id: branch-names
      uses: tj-actions/branch-names@v5.1
      
    - name: Current branch name
      run: echo "${{steps.branch-names.outputs.current_branch}}"
      
#     - name: Install git-conventional-commits
#       run: npm install --global git-conventional-commits
      
#     - name: Validate last commit message
#       run: |
#         git checkout ${{ steps.branch-names.outputs.current_branch }}
#         git rev-list --format=%B --max-count=1 HEAD | tail +2 > msg.txt
#         git-conventional-commits commit-msg-hook msg.txt

#     - name: Determine version
#       id: conventional-commits
#       run: echo "::set-output name=version::$(npx -q git-conventional-commits version)"
      
#     - name: examine version
#       run: echo "${{ steps.conventional-commits.outputs.version }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Test
      run: dotnet test --verbosity normal   

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: Set version variables
      run: |
        echo "STABLE=${{steps.gitversion.outputs.majorMinorPatch}}" >> $GITHUB_ENV
        echo "BETA=${{steps.gitversion.outputs.majorMinorPatch}}-beta.$(date +%s)" >> $GITHUB_ENV

    - name: Set job versions
      id: version
      run: |
        echo "::set-output name=beta-version::${{env.BETA}}"
        echo "::set-output name=stable-version::${{env.STABLE}}"

    - name: Pack
      run: |
        dotnet pack 'QueryBuilder/QueryBuilder.csproj' --configuration Release /p:Version="${{env.BETA}}" --output beta
        dotnet pack 'QueryBuilder/QueryBuilder.csproj' --configuration Release /p:Version="${{env.STABLE}}" --output stable

    - name: Publish Beta
      uses: actions/upload-artifact@v2
      with:
        name: beta
        path: 'beta/*.nupkg'

    - name: Publish Stable
      uses: actions/upload-artifact@v2
      with:
        name: stable
        path: 'stable/*.nupkg'


  Sign:
    runs-on: windows-latest
    environment: Sign
    needs: Build
    steps:
    - name: Download Beta
      uses: actions/download-artifact@v2
      with:
        name: beta
        path: unsigned/beta

    - name: Download Stable
      uses: actions/download-artifact@v2
      with:
        name: stable
        path: unsigned/stable

    - name: Create signed directory
      run: |
        mkdir signed
        mkdir signed/beta
        mkdir signed/stable
        ls
        ls signed/
        ls unsigned/
        echo $GITHUB_WORKSPACE

    - name: Create Auth file
      env: 
        APP_ID: ${{ secrets.AAD_SIGNING_CLIENT_ID }}
      run: |
        $authJson = @'
        {
          "Version": "1.0.0",
          "AuthenticationType": "AAD_CERT",
          "TenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
          "ClientId": "${{env.APP_ID}}",
          "AuthCert": {
            "SubjectName": "CN=${{env.APP_ID}}.microsoft.com",
            "StoreLocation": "LocalMachine",
            "StoreName": "My",
            "SendX5c": "true"
          },
          "RequestSigningCert": {
            "SubjectName": "CN=${{env.APP_ID}}",
            "StoreLocation": "LocalMachine",
            "StoreName": "My"
          }
        }
        '@
        Out-File -FilePath .\auth.json -InputObject $authJson
        Get-Content -Path .\auth.json

    - name: Create Beta Input file
      env:
        workspace: $([regex]::escape($GITHUB_WORKSPACE))
      run: |
        $betaInputJson = @'
        {
          "Version": "1.0.0",
          "SignBatches": [
            {
              "SourceLocationType": "UNC",
              "SourceRootDirectory": "${{workspace}}\\unsigned\\beta",
              "DestinationLocationType": "UNC",
              "DestinationRootDirectory": "${{workspace}}\\signed\\beta",
              "SignRequestFiles": [
                {
                  "SourceLocation": "Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.${{needs.Build.outputs.beta-version}}.nupkg",
                  "DestinationLocation": "Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.${{needs.Build.outputs.beta-version}}.nupkg"
                }
              ],
              "SigningInfo": {
                "Operations": [
                  {
                    "KeyCode": "CP-401405",
                    "OperationCode": "NuGetSign",
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                  "KeyCode": "CP-401405",
                    "OperationCode": "NuGetVerify",
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
              }
            }
          ]
        }
        '@
        Out-File -FilePath .\betaInput.json -InputObject $betaInputJson
        Get-Content -Path .\betaInput.json

#     - name: Create Stable Input file
#       env: 
#         APP_ID: ${{ secrets.AAD_SIGNING_CLIENT_ID }}
#       run: |
#         $stableInputJson = @'
#         {
#           "Version": "1.0.0",
#           "SignBatches": [
#             {
#               "SourceLocationType": "UNC",
#               "SourceRootDirectory": ".\\unsigned\\stable",
#               "DestinationLocationType": "UNC",
#               "DestinationRootDirectory": ".\\signed\\stable",
#               "SignRequestFiles": [
#                 {
#                   "SourceLocation": "Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.${{needs.Build.outputs.stable-version}}.nupkg",
#                   "DestinationLocation": "Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.${{needs.Build.outputs.stable-version}}.nupkg"
#                 }
#               ],
#               "SigningInfo": {
#                 "Operations": [
#                   {
#                     "KeyCode": "CP-401405",
#                     "OperationCode": "NuGetSign",
#                     "ToolName": "sign",
#                     "ToolVersion": "1.0"
#                   },
#                   {
#                   "KeyCode": "CP-401405",
#                     "OperationCode": "NuGetVerify",
#                     "ToolName": "sign",
#                     "ToolVersion": "1.0"
#                   }
#                 ]
#               }
#             }
#           ]
#         }
#         '@
#         Out-File -FilePath .\stableInput.json -InputObject $stableInputJson

    - uses: azure/login@v1
      name: Azure Login
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install ESRP Client
      run: |
        az storage blob download --auth-mode login --subscription  ${{ secrets.AZURE_SUBSCRIPTION }} --account-name wlpistorageaccount -c esrp-client -n microsoft.esrpclient.1.2.76.zip -f esrp.zip
        ls
        unzip -d ./esrp esrp.zip

    - name: Install Certificates
      env:
        AZ_SUB: ${{ secrets.AZURE_SUBSCRIPTION }}
        AZ_VAULT: ${{ secrets.AZURE_VAULT }}
        AAD_CERT: ${{ secrets.AAD_AUTH_CERT }}
        ESRP_CERT: ${{ secrets.ESRP_SIGNING_CERT }}
      run: |
        az keyvault secret download --subscription "${{env.AZ_SUB}}" --vault-name "${{env.AZ_VAULT}}" --name "${{env.AAD_CERT}}" -f out.pfx
        certutil -silent -f -importpfx out.pfx
        rm out.pfx
        az keyvault secret download --subscription "${{env.AZ_SUB}}" --vault-name "${{env.AZ_VAULT}}" --name "${{env.ESRP_CERT}}" -f out.pfx
        certutil -silent -f -importpfx out.pfx
        rm out.pfx

    - name: Run ESRP Client
      run: |
        ./esrp/tools/EsrpClient.exe sign -a ./auth.json -p ./esrp/tools/Policy.json -c ./esrp/tools/Config.json -i ./betaInput.json -o ./Output.json -l Verbose -f STDOUT

    - name: Azure logout
      run: az logout
      if: always()
