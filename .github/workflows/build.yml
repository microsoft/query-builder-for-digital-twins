on:
  workflow_call:
    inputs:
      project-to-pack:
        required: true
        type: string
    outputs:
      beta-version:
        description: "Beta version number."
        value: ${{jobs.Pack.outputs.beta-version}}
      stable-version:
        description: "Stable version number."
        value: ${{jobs.Pack.outputs.stable-version}}

jobs:
  Pack:
    runs-on: ubuntu-latest
    outputs:
      beta-version: ${{steps.version.outputs.beta-version}}
      stable-version: ${{steps.version.outputs.stable-version}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Test
      run: dotnet test --verbosity normal   

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: Set version variables
      run: |
        echo "STABLE=${{steps.gitversion.outputs.majorMinorPatch}}" >> $GITHUB_ENV
        echo "BETA=${{steps.gitversion.outputs.majorMinorPatch}}-beta.$(date +%s)" >> $GITHUB_ENV

    - name: Output Version Numbers
      id: version
      run: |
        echo "::set-output name=beta-version::${{env.BETA}}"
        echo "::set-output name=stable-version::${{env.STABLE}}"

    - name: Pack
      run: |
        dotnet pack "${{inputs.project-to-pack}}" --configuration Release /p:Version="${{env.BETA}}" --output unsigned/beta
        dotnet pack "${{inputs.project-to-pack}}" --configuration Release /p:Version="${{env.STABLE}}" --output unsigned/stable

    - name: Upload Unsigned Packages
      uses: actions/upload-artifact@v2
      with:
        name: unsigned
        path: unsigned

#    - name: Get branch names
#      id: branch-names
#      uses: tj-actions/branch-names@v5.1

#    - name: Current branch name
#      run: echo "${{steps.branch-names.outputs.current_branch}}"

#     - name: Install git-conventional-commits
#       run: npm install --global git-conventional-commits
      
#     - name: Validate last commit message
#       run: |
#         git checkout ${{ steps.branch-names.outputs.current_branch }}
#         git rev-list --format=%B --max-count=1 HEAD | tail +2 > msg.txt
#         git-conventional-commits commit-msg-hook msg.txt

#     - name: Determine version
#       id: conventional-commits
#       run: echo "::set-output name=version::$(npx -q git-conventional-commits version)"
      
#     - name: examine version
#       run: echo "${{ steps.conventional-commits.outputs.version }}"
