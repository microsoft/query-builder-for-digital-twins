// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.Typed
{
    using System;
    using System.Collections.Generic;
    using global::Azure.DigitalTwins.Core;
    using Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.Common.Clauses;
    using Microsoft.DigitalWorkplace.DigitalTwins.QueryBuilder.Common.Helpers;

    /// <summary>
    /// Base query for all select queries.
    /// </summary>
    public abstract class SelectQueryBase<TQuery> : JoinQuery<TQuery>
        where TQuery : SelectQueryBase<TQuery>
    {
        internal SelectQueryBase(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClause) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause)
        {
        }

        /// <summary>
        /// Select Top(N) records.
        /// </summary>
        /// <param name="numberOfRecords">Postive number.</param>
        /// <returns>The ADT Query with TOP clause.</returns>
        public TQuery Top(ushort numberOfRecords)
        {
            selectClause.NumberOfRecords = numberOfRecords;
            return (TQuery)this;
        }
    }

    /// <summary>
    /// The query that has the default select that was generated by the FROM clause.
    /// </summary>
    public class DefaultSelectQuery<T> : SelectQueryBase<DefaultSelectQuery<T>>
        where T : BasicDigitalTwin
    {
        internal DefaultSelectQuery(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }

        /// <summary>
        /// Select a type and optionally provide an alias.
        /// </summary>
        /// <typeparam name="TSelect">The type to be selected.</typeparam>
        /// <param name="alias">Optional alias to map to the selected type.</param>
        /// <returns>ADT query instance with one select clause.</returns>
        public Query<TSelect> Select<TSelect>(string alias = null)
            where TSelect : BasicDigitalTwin
        {
            QueryValidator.ValidateType<TSelect>(Types);

            ClearSelects();

            ValidateAndAddSelect<TSelect>(alias);
            return new Query<TSelect>(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause);
        }
    }

    /// <summary>
    /// The query that has one select clause.
    /// </summary>
    /// <typeparam name="T">The selected type.</typeparam>
    public class Query<T> : SelectQueryBase<Query<T>>
        where T : BasicDigitalTwin
    {
        internal Query(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }

        /// <summary>
        /// Select a type and optionally provide an alias.
        /// </summary>
        /// <typeparam name="TSelect">The type to be selected.</typeparam>
        /// <param name="alias">Optional alias to map to the selected type.</param>
        /// <returns>ADT query instance with two select clauses.</returns>
        public Query<T, TSelect> Select<TSelect>(string alias = null)
            where TSelect : BasicDigitalTwin
        {
            QueryValidator.ValidateType<TSelect>(Types);

            ValidateAndAddSelect<TSelect>(alias);
            return new Query<T, TSelect>(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause);
        }
    }

    /// <summary>
    /// The query that has two select clause.
    /// </summary>
    /// <typeparam name="T1">The first selected type.</typeparam>
    /// <typeparam name="T2">The second selected type.</typeparam>
    public class Query<T1, T2> : SelectQueryBase<Query<T1, T2>>
        where T1 : BasicDigitalTwin
        where T2 : BasicDigitalTwin
    {
        internal Query(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }

        /// <summary>
        /// Select a type and optionally provide an alias.
        /// </summary>
        /// <typeparam name="TSelect">The type to be selected.</typeparam>
        /// <param name="alias">Optional alias to map to the selected type.</param>
        /// <returns>ADT query instance with three select clauses.</returns>
        public Query<T1, T2, TSelect> Select<TSelect>(string alias = null)
            where TSelect : BasicDigitalTwin
        {
            QueryValidator.ValidateType<TSelect>(Types);

            ValidateAndAddSelect<TSelect>(alias);
            return new Query<T1, T2, TSelect>(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause);
        }
    }

    /// <summary>
    /// The query that has three select clause.
    /// </summary>
    /// <typeparam name="T1">The first selected type.</typeparam>
    /// <typeparam name="T2">The second selected type.</typeparam>
    /// <typeparam name="T3">The third selected type.</typeparam>
    public class Query<T1, T2, T3> : SelectQueryBase<Query<T1, T2, T3>>
        where T1 : BasicDigitalTwin
        where T2 : BasicDigitalTwin
        where T3 : BasicDigitalTwin
    {
        internal Query(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }

        /// <summary>
        /// Select a type and optionally provide an alias.
        /// </summary>
        /// <typeparam name="TSelect">The type to be selected.</typeparam>
        /// <param name="alias">Optional alias to map to the selected type.</param>
        /// <returns>ADT query instance with four select clauses.</returns>
        public Query<T1, T2, T3, TSelect> Select<TSelect>(string alias = null)
            where TSelect : BasicDigitalTwin
        {
            QueryValidator.ValidateType<TSelect>(Types);

            ValidateAndAddSelect<TSelect>(alias);
            return new Query<T1, T2, T3, TSelect>(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause);
        }
    }

    /// <summary>
    /// The query that has four select clause.
    /// </summary>
    /// <typeparam name="T1">The first selected type.</typeparam>
    /// <typeparam name="T2">The second selected type.</typeparam>
    /// <typeparam name="T3">The third selected type.</typeparam>
    /// <typeparam name="T4">The fourth selected type.</typeparam>
    public class Query<T1, T2, T3, T4> : SelectQueryBase<Query<T1, T2, T3, T4>>
        where T1 : BasicDigitalTwin
        where T2 : BasicDigitalTwin
        where T3 : BasicDigitalTwin
        where T4 : BasicDigitalTwin
    {
        internal Query(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }

        /// <summary>
        /// Select a type and optionally provide an alias.
        /// </summary>
        /// <typeparam name="TSelect">The type to be selected.</typeparam>
        /// <param name="alias">Optional alias to map to the selected type.</param>
        /// <returns>ADT query instance with five select clauses.</returns>
        public Query<T1, T2, T3, T4, TSelect> Select<TSelect>(string alias = null)
            where TSelect : BasicDigitalTwin
        {
            QueryValidator.ValidateType<TSelect>(Types);

            ValidateAndAddSelect<TSelect>(alias);
            return new Query<T1, T2, T3, T4, TSelect>(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause);
        }
    }

    /// <summary>
    /// The query that has five select clause.
    /// </summary>
    /// <typeparam name="T1">The first selected type.</typeparam>
    /// <typeparam name="T2">The second selected type.</typeparam>
    /// <typeparam name="T3">The third selected type.</typeparam>
    /// <typeparam name="T4">The fourth selected type.</typeparam>
    /// <typeparam name="T5">The fifth selected type.</typeparam>
    public class Query<T1, T2, T3, T4, T5> : SelectQueryBase<Query<T1, T2, T3, T4, T5>>
        where T1 : BasicDigitalTwin
        where T2 : BasicDigitalTwin
        where T3 : BasicDigitalTwin
        where T4 : BasicDigitalTwin
        where T5 : BasicDigitalTwin
    {
        internal Query(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }

        /// <summary>
        /// Select a type and optionally provide an alias.
        /// </summary>
        /// <typeparam name="TSelect">The type to be selected.</typeparam>
        /// <param name="alias">Optional alias to map to the selected type.</param>
        /// <returns>ADT query instance with five select clauses.</returns>
        public Query<T1, T2, T3, T4, T5, TSelect> Select<TSelect>(string alias = null)
            where TSelect : BasicDigitalTwin
        {
            QueryValidator.ValidateType<TSelect>(Types);

            ValidateAndAddSelect<TSelect>(alias);
            return new Query<T1, T2, T3, T4, T5, TSelect>(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClause);
        }
    }

    /// <summary>
    /// The query that has six select clause.
    /// </summary>
    /// <typeparam name="T1">The first selected type.</typeparam>
    /// <typeparam name="T2">The second selected type.</typeparam>
    /// <typeparam name="T3">The third selected type.</typeparam>
    /// <typeparam name="T4">The fourth selected type.</typeparam>
    /// <typeparam name="T5">The fifth selected type.</typeparam>
    /// <typeparam name="T6">The sixth selected type.</typeparam>
    public class Query<T1, T2, T3, T4, T5, T6> : SelectQueryBase<Query<T1, T2, T3, T4, T5, T6>>
        where T1 : BasicDigitalTwin
        where T2 : BasicDigitalTwin
        where T3 : BasicDigitalTwin
        where T4 : BasicDigitalTwin
        where T5 : BasicDigitalTwin
        where T6 : BasicDigitalTwin
    {
        internal Query(IDictionary<string, Type> aliasToTypeMapping, SelectClause selectClause, FromClause fromClause, IList<JoinClause> joinClauses, WhereClause whereClauses) : base(aliasToTypeMapping, selectClause, fromClause, joinClauses, whereClauses)
        {
        }
    }
}